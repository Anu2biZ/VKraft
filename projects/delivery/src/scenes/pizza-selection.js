const COMMANDS = require('../constants/commands');
const { createPizzaSelectionKeyboard } = require('../keyboards');

// –°—Ü–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–∏—Ü—Ü—ã
function createPizzaSelectionScene(bot) {
    return {
        name: 'pizza_selection',
        async enter(ctx) {
            const category = ctx.getUserData('selectedCategory');
            const pizzas = (await bot.getAllDocuments('pizzas'))
                .filter(p => p.categoryId === category.code);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Ü—Ü—ã —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
            await bot.reply(ctx, `–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∏—Ü—Ü—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.name}:`);
            
            for (const pizza of pizzas) {
                await bot.sendImgWithText(
                    ctx.peerId,
                    `üçï ${pizza.name}\nüìù ${pizza.description}\nüí∞ –¶–µ–Ω–∞: ${pizza.price} —Ä—É–±.`,
                    pizza.image
                );
            }

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∏—Ü—Ü
            createPizzaSelectionKeyboard(bot, category, pizzas);
            await bot.reply(ctx, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:', `category_${category.code}`);
        },
        async handle(ctx) {
            console.log('–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', {
                text: ctx.message?.text,
                payload: ctx.message?.payload,
                messagePayload: ctx.messagePayload,
                message: ctx.message
            });

            const text = ctx.message?.text?.toLowerCase();
            // –í production —Ä–µ–∂–∏–º–µ payload –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            let payload = ctx.message?.payload || ctx.messagePayload;
            console.log('–ò—Å—Ö–æ–¥–Ω—ã–π payload:', payload, '–¢–∏–ø:', typeof payload);
            
            if (typeof payload === 'string') {
                try {
                    payload = JSON.parse(payload);
                    console.log('–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π payload:', payload);
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ payload:', e);
                }
            }
            
            console.log('–ò—Ç–æ–≥–æ–≤—ã–π payload:', payload);

            if (text === COMMANDS.CHECKOUT) {
                await bot.scenes.enter(ctx.peerId, 'payment', ctx);
                return;
            }
            
            if (payload && payload.command === 'add_to_cart') {
                const pizzas = await bot.getAllDocuments('pizzas');
                const pizza = pizzas.find(p => p.name === payload.pizzaName);
                
                if (pizza) {
                    await bot.addDocument('cart', {
                        userId: ctx.peerId,
                        pizza: pizza,
                        timestamp: new Date()
                    });

                    const category = ctx.getUserData('selectedCategory');
                    await bot.reply(
                        ctx,
                        `‚úÖ –ü–∏—Ü—Ü–∞ "${pizza.name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!\n–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø–∏—Ü—Ü—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.`,
                        `category_${category.code}`
                    );
                }
            }
        }
    };
}

module.exports = createPizzaSelectionScene;
