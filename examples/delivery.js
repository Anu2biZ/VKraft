const { bot } = require('../lib/index.js');
const DebugServer = require('../web/server.js');
const config = require('../lib/config');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
if (process.env.NODE_ENV === 'production') {
    if (!process.env.VK_TOKEN) {
        console.error('–û–®–ò–ë–ö–ê: –î–ª—è —Ä–∞–±–æ—Ç—ã –≤ production —Ä–µ–∂–∏–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω VK –≤ —Ñ–∞–π–ª–µ .env');
        console.error('–ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
        console.error('1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env.example –≤ .env');
        console.error('2. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω VK –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π VK_TOKEN');
        process.exit(1);
    }
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
const COMMANDS = {
    START: '–Ω–∞—á–∞—Ç—å',
    HELP: '–ø–æ–º–æ—â—å',
    DELIVERY: '–¥–æ—Å—Ç–∞–≤–∫–∞',
    BACK: '–Ω–∞–∑–∞–¥',
    CANCEL: '–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
    CHECKOUT: '–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'
};

// –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
let categoriesCache = null;
let pizzasCache = null;

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
const getCategories = async () => {
    if (categoriesCache) {
        return categoriesCache;
    }
    categoriesCache = await bot.getAllDocuments('categories');
    return categoriesCache;
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Ü—Ü (–±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
const getPizzas = async () => {
    console.log('–ü–æ–ª—É—á–∞–µ–º –ø–∏—Ü—Ü—ã –∏–∑ –ë–î...');
    const pizzas = await bot.getAllDocuments('pizzas');
    console.log('–ü–æ–ª—É—á–µ–Ω—ã –ø–∏—Ü—Ü—ã –∏–∑ –ë–î:', JSON.stringify(pizzas, null, 2));
    return pizzas;
};

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const initCategories = async () => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    categoriesCache = null;
    pizzasCache = null;
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await bot.clearCollection('categories');

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const defaultCategories = [
        {
            code: 'meat',
            name: '–ú—è—Å–Ω—ã–µ',
            color: 'primary'
        },
        {
            code: 'vegetarian',
            name: '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ',
            color: 'positive'
        },
        {
            code: 'spicy',
            name: '–û—Å—Ç—Ä—ã–µ',
            color: 'negative'
        }
    ];

    for (const category of defaultCategories) {
        await bot.addDocument('categories', category);
    }

    return defaultCategories;
};

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–∏—Ü—Ü–∞–º–∏
const initDatabase = async () => {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = await initCategories();
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∏—Ü—Ü—ã
    await bot.clearCollection('pizzas');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∏—Ü—Ü—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const defaultPizzas = [
        // –ú—è—Å–Ω—ã–µ –ø–∏—Ü—Ü—ã
        {
            name: '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏',
            categoryId: 'meat',
            price: 599,
            description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–∏—Ü—Ü–∞ —Å —Ç–æ–º–∞—Ç–Ω—ã–º —Å–æ—É—Å–æ–º, —Å—ã—Ä–æ–º –º–æ—Ü–∞—Ä–µ–ª–ª–∞ –∏ –ø–∏–∫–∞–Ω—Ç–Ω–æ–π –ø–µ–ø–ø–µ—Ä–æ–Ω–∏',
            // –í development —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, –≤ production - URL
            image: 'https://img.freepik.com/free-photo/hawaiian-pizza_74190-2500.jpg'
        },
        {
            name: '–ú—è—Å–Ω–∞—è',
            categoryId: 'meat',
            price: 649,
            description: '–°—ã—Ç–Ω–∞—è –ø–∏—Ü—Ü–∞ —Å —Ç–æ–º–∞—Ç–Ω—ã–º —Å–æ—É—Å–æ–º, –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π, –±–µ–∫–æ–Ω–æ–º, –≤–µ—Ç—á–∏–Ω–æ–π –∏ –∫–æ–ª–±–∞—Å–∫–∞–º–∏',
            image: 'https://img.freepik.com/free-photo/hawaiian-pizza_74190-2500.jpg'
        },
        {
            name: '–ì–∞–≤–∞–π—Å–∫–∞—è',
            categoryId: 'meat',
            price: 599,
            description: '–≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∞—è –ø–∏—Ü—Ü–∞ —Å —Ç–æ–º–∞—Ç–Ω—ã–º —Å–æ—É—Å–æ–º, –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π, –≤–µ—Ç—á–∏–Ω–æ–π –∏ –∞–Ω–∞–Ω–∞—Å–∞–º–∏',
            image: 'https://img.freepik.com/free-photo/hawaiian-pizza_74190-2500.jpg'
        },
        // –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ –ø–∏—Ü—Ü—ã
        {
            name: '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞',
            categoryId: 'vegetarian',
            price: 499,
            description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –ø–∏—Ü—Ü–∞ —Å —Ç–æ–º–∞—Ç–Ω—ã–º —Å–æ—É—Å–æ–º, –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π –∏ —Å–≤–µ–∂–∏–º –±–∞–∑–∏–ª–∏–∫–æ–º',
            image: 'https://img.freepik.com/free-photo/pizza-margarita-table_140725-5611.jpg'
        },
        {
            name: '–ì—Ä–∏–±–Ω–∞—è',
            categoryId: 'vegetarian',
            price: 549,
            description: '–ê—Ä–æ–º–∞—Ç–Ω–∞—è –ø–∏—Ü—Ü–∞ —Å –≥—Ä–∏–±–∞–º–∏, –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π, –ª—É–∫–æ–º –∏ –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–º–∏ —Ç—Ä–∞–≤–∞–º–∏',
            image: 'https://img.freepik.com/free-photo/mushroom-pizza-vegetarian-white-background_123827-20891.jpg'
        },
        {
            name: '–û–≤–æ—â–Ω–∞—è',
            categoryId: 'vegetarian',
            price: 499,
            description: '–õ–µ–≥–∫–∞—è –ø–∏—Ü—Ü–∞ —Å —Ç–æ–º–∞—Ç–∞–º–∏, –ø–µ—Ä—Ü–µ–º, –ª—É–∫–æ–º, –æ–ª–∏–≤–∫–∞–º–∏ –∏ —Å–≤–µ–∂–∏–º–∏ —Ç—Ä–∞–≤–∞–º–∏',
            image: 'https://img.freepik.com/free-photo/vegetarian-pizza-with-mushrooms-bell-peppers_140725-5297.jpg'
        },
        // –û—Å—Ç—Ä—ã–µ –ø–∏—Ü—Ü—ã
        {
            name: '–î—å—è–±–ª–æ',
            categoryId: 'spicy',
            price: 649,
            description: '–û—Å—Ç—Ä–∞—è –ø–∏—Ü—Ü–∞ —Å —Å–∞–ª—è–º–∏, –ø–µ—Ä—Ü–µ–º —Ö–∞–ª–∞–ø–µ–Ω—å–æ, –∫—Ä–∞—Å–Ω—ã–º –ª—É–∫–æ–º –∏ –æ—Å—Ç—Ä—ã–º —Å–æ—É—Å–æ–º',
            image: 'https://img.freepik.com/free-photo/spicy-pizza-with-chili-peppers_140725-5395.jpg'
        },
        {
            name: '–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è',
            categoryId: 'spicy',
            price: 629,
            description: '–û—Å—Ç—Ä–∞—è –ø–∏—Ü—Ü–∞ –≤ –º–µ–∫—Å–∏–∫–∞–Ω—Å–∫–æ–º —Å—Ç–∏–ª–µ —Å —Ñ–∞—Ä—à–µ–º, –ø–µ—Ä—Ü–µ–º —Ö–∞–ª–∞–ø–µ–Ω—å–æ –∏ –∫—É–∫—É—Ä—É–∑–æ–π',
            image: 'https://img.freepik.com/free-photo/mexican-pizza-with-beef-chilli_140725-5298.jpg'
        },
        {
            name: '–û—Å—Ç—Ä—ã–π –ß–∏–ª–∏',
            categoryId: 'spicy',
            price: 599,
            description: '–ñ–≥—É—á–∞—è –ø–∏—Ü—Ü–∞ —Å –æ—Å—Ç—Ä—ã–º –ø–µ—Ä—Ü–µ–º —á–∏–ª–∏, –ø–∞–ø—Ä–∏–∫–æ–π –∏ —Å–ø–µ—Ü–∏—è–º–∏',
            image: 'https://img.freepik.com/free-photo/pizza-with-chili-peppers-wooden-table_140725-5382.jpg'
        }
    ];

    for (const pizza of defaultPizzas) {
        await bot.addDocument('pizzas', pizza);
    }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
const handleStart = async (ctx) => {
    console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞—Ç—å');
    await bot.sendText(
        ctx.peerId,
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∏—Ü—Ü–µ—Ä–∏—é! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑.',
        'main'
    );
    ctx.setState('main');
};

const handleHelp = async (ctx) => {
    console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â—å');
    await bot.sendText(
        ctx.peerId,
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
        `- ${COMMANDS.START}: –Ω–∞—á–∞—Ç—å –∑–∞–∫–∞–∑\n` +
        `- ${COMMANDS.HELP}: –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n` +
        `- ${COMMANDS.DELIVERY}: –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É\n` +
        `- ${COMMANDS.CANCEL}: –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑`,
        'main'
    );
};

const handleDelivery = async (ctx) => {
    console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∞');
    await bot.sendText(
        ctx.peerId,
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–∏—Ü—Ü—ã:',
        'categories'
    );
    ctx.setState('categories');
};

const handleCategory = async (ctx, categoryName) => {
    console.log('–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', categoryName);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ë–î
    const categories = await getCategories();
    const category = categories.find(c => c.name === categoryName);
    
    if (!category) {
        console.error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', categoryName);
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–∏—Ü—Ü—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const pizzas = await getPizzas();
    console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:', category);
    console.log('–ö–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', category.code);
    console.log('–í—Å–µ –ø–∏—Ü—Ü—ã:', pizzas);
    const categoryPizzas = pizzas.filter(p => {
        console.log('–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º categoryId –ø–∏—Ü—Ü—ã:', p.categoryId, '—Å –∫–æ–¥–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', category.code);
        return p.categoryId === category.code;
    });
    console.log('–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∏—Ü—Ü—ã:', categoryPizzas);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    await bot.addDocument('user_states', {
        userId: ctx.peerId,
        categoryId: category.code
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∏—Ü—Ü–∞–º–∏
    await bot.sendText(ctx.peerId, `–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∏—Ü—Ü—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.name}:`, null);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Ü—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoryPizzas);
    await Promise.all(categoryPizzas.map(async pizza => {
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Ü—Ü—ã:', pizza.name, pizza.image);
        try {
            await bot.sendImgWithText(
                ctx.peerId,
                `üçï ${pizza.name}\nüìù ${pizza.description}\nüí∞ –¶–µ–Ω–∞: ${pizza.price} —Ä—É–±.`,
                pizza.image,
                'pizza_actions'
            );
            console.log('–ü–∏—Ü—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', pizza.name);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Ü—Ü—ã:', pizza.name, error);
        }
    }));
    
    ctx.setState('pizza_selection');
};

const handlePizzaSelection = async (ctx, pizzaName) => {
    console.log('–í—ã–±—Ä–∞–Ω–∞ –ø–∏—Ü—Ü–∞:', pizzaName);
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∏—Ü—Ü—É –≤ –∫–æ—Ä–∑–∏–Ω—É
    const pizza = (await getPizzas()).find(p => p.name === pizzaName);
    if (pizza) {
        await bot.addDocument('cart', {
            userId: ctx.peerId,
            pizza: pizza,
            timestamp: new Date()
        });
        
        await bot.sendText(
            ctx.peerId,
            `–ü–∏—Ü—Ü–∞ "${pizzaName}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?`,
            'cart_actions'
        );
        ctx.setState('cart');
    }
};

const handleCheckout = async (ctx) => {
    console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞');
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const cartItems = (await bot.getAllDocuments('cart'))
        .filter(item => item.userId === ctx.peerId);
    
    if (cartItems.length === 0) {
        await bot.sendText(
            ctx.peerId,
            '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–∏—Ü—Ü—ã –≤ –∑–∞–∫–∞–∑.',
            'main'
        );
        return;
    }

    // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
    const total = cartItems.reduce((sum, item) => sum + item.pizza.price, 0);
    
    await bot.sendText(
        ctx.peerId,
        '–í–∞—à –∑–∞–∫–∞–∑:\n' +
        cartItems.map(item => `- ${item.pizza.name} (${item.pizza.price} —Ä—É–±.)`).join('\n') +
        `\n\n–ò—Ç–æ–≥–æ: ${total} —Ä—É–±.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –≠—Ç–æ –¥–µ–º–æ-–±–æ—Ç, –ø–æ—ç—Ç–æ–º—É –æ–ø–ª–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.`,
        'main'
    );

    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const item of cartItems) {
        await bot.deleteDocument('cart', item._id);
    }
    
    ctx.setState('main');
};

const handleCancel = async (ctx) => {
    console.log('–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞');
    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const cartItems = (await bot.getAllDocuments('cart'))
        .filter(item => item.userId === ctx.peerId);
    
    for (const item of cartItems) {
        await bot.deleteDocument('cart', item._id);
    }

    await bot.sendText(
        ctx.peerId,
        '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
        'main'
    );
    ctx.setState('main');
};

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
const registerCommandsAndKeyboards = async () => {
    console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥...');
    bot.command(COMMANDS.START, handleStart);
    bot.command(COMMANDS.HELP, handleHelp);
    bot.command(COMMANDS.DELIVERY, handleDelivery);
    bot.command(COMMANDS.CANCEL, handleCancel);
    bot.command(COMMANDS.CHECKOUT, handleCheckout);

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—ã
    console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–∞–∫ –∫–æ–º–∞–Ω–¥...');
    const categories = await getCategories();
    categories.forEach(category => {
        bot.command(category.name.toLowerCase(), (ctx) => handleCategory(ctx, category.name));
    });

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    bot.registerKeyboard('main', {
        buttons: [
            {
                text: COMMANDS.DELIVERY,
                color: 'primary',
                row: 0
            },
            {
                text: COMMANDS.HELP,
                color: 'secondary',
                row: 0
            }
        ]
    });

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    const categoryButtons = categories.map((category, index) => ({
        text: category.name,
        color: category.color,
        row: 0
    }));

    bot.registerKeyboard('categories', {
        buttons: [
            ...categoryButtons,
            {
                text: COMMANDS.BACK,
                color: 'secondary',
                row: 1
            }
        ]
    });

    bot.registerKeyboard('pizza_actions', {
        buttons: [
            {
                text: COMMANDS.BACK,
                color: 'secondary',
                row: 0
            },
            {
                text: COMMANDS.CANCEL,
                color: 'negative',
                row: 0
            }
        ]
    });

    bot.registerKeyboard('cart_actions', {
        buttons: [
            {
                text: COMMANDS.DELIVERY,
                color: 'primary',
                row: 0
            },
            {
                text: COMMANDS.CHECKOUT,
                color: 'positive',
                row: 0
            },
            {
                text: COMMANDS.CANCEL,
                color: 'negative',
                row: 1
            }
        ]
    });
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (ctx) => {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const text = (ctx.message?.text || '').toLowerCase();
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', text);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    switch(text) {
        case COMMANDS.START:
            await handleStart(ctx);
            break;
        case COMMANDS.HELP:
            await handleHelp(ctx);
            break;
        case COMMANDS.DELIVERY:
            await handleDelivery(ctx);
            break;
        case COMMANDS.CANCEL:
            await handleCancel(ctx);
            break;
        case COMMANDS.CHECKOUT:
            await handleCheckout(ctx);
            break;
        case COMMANDS.BACK:
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            const state = ctx.getState();
            if (state === 'categories') {
                await handleStart(ctx);
            } else if (state === 'pizza_selection') {
                await handleDelivery(ctx);
            }
            break;
        default:
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const categories = await getCategories();
            const selectedCategory = categories.find(c => c.name.toLowerCase() === text);
            if (selectedCategory) {
                await handleCategory(ctx, selectedCategory.name);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –ø–∏—Ü—Ü–∞
            const pizzas = await getPizzas();
            const selectedPizza = pizzas.find(p => p.name.toLowerCase() === text);
            if (selectedPizza) {
                await handlePizzaSelection(ctx, selectedPizza.name);
            } else {
                // –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                await handleStart(ctx);
            }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞
bot.on('start', async () => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
});

// –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω
if (config.webInterface.enabled) {
    const debugServer = new DebugServer();
    debugServer.start().then(() => {
        console.log(`–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:${config.webInterface.port}`);
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫
const start = async () => {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await bot.init({
            dbUri: config.database.uri
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–∏—Ü—Ü–∞–º–∏
        await initDatabase();

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        await registerCommandsAndKeyboards();

        // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        console.log('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
        bot.start();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
        process.exit(1);
    }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
start();
