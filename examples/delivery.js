const { bot } = require('../lib/index.js');
const DebugServer = require('../web/server.js');
const config = require('../lib/config');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
if (process.env.NODE_ENV === 'production') {
    if (!process.env.VK_TOKEN) {
        console.error('–û–®–ò–ë–ö–ê: –î–ª—è —Ä–∞–±–æ—Ç—ã –≤ production —Ä–µ–∂–∏–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω VK –≤ —Ñ–∞–π–ª–µ .env');
        console.error('–ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
        console.error('1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env.example –≤ .env');
        console.error('2. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω VK –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π VK_TOKEN');
        process.exit(1);
    }
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
const COMMANDS = {
    START: '–Ω–∞—á–∞—Ç—å',
    HELP: '–ø–æ–º–æ—â—å',
    DELIVERY: '–¥–æ—Å—Ç–∞–≤–∫–∞',
    BACK: '–Ω–∞–∑–∞–¥',
    CANCEL: '–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
    CHECKOUT: '–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
    PAYMENT: '–ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ'
};

// –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
let categoriesCache = null;
let pizzasCache = null;

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
const getCategories = async () => {
    if (categoriesCache) {
        return categoriesCache;
    }
    categoriesCache = await bot.getAllDocuments('categories');
    return categoriesCache;
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Ü—Ü (–±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
const getPizzas = async () => {
    console.log('–ü–æ–ª—É—á–∞–µ–º –ø–∏—Ü—Ü—ã –∏–∑ –ë–î...');
    const pizzas = await bot.getAllDocuments('pizzas');
    console.log('–ü–æ–ª—É—á–µ–Ω—ã –ø–∏—Ü—Ü—ã –∏–∑ –ë–î:', JSON.stringify(pizzas, null, 2));
    return pizzas;
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
const handleStart = async (ctx) => {
    console.log('=== –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞—Ç—å ===');
    console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.peerId);
    console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', await ctx.getState());
    
    try {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–Ω–æ–≤–æ
        console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...');
        bot.registerKeyboard('main', {
            buttons: [
                {
                    text: COMMANDS.DELIVERY,
                    color: 'primary',
                    row: 0
                },
                {
                    text: COMMANDS.HELP,
                    color: 'secondary',
                    row: 0
                }
            ]
        });
        console.log('–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞');

        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
        await bot.sendText(
            ctx.peerId,
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∏—Ü—Ü–µ—Ä–∏—é! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑.',
            'main'
        );
        console.log('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        
        console.log('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è main...');
        await ctx.setState('main');
        console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ main —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handleStart:', error);
    }
};

const handleHelp = async (ctx) => {
    console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â—å');
    await bot.sendText(
        ctx.peerId,
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
        `- ${COMMANDS.START}: –Ω–∞—á–∞—Ç—å –∑–∞–∫–∞–∑\n` +
        `- ${COMMANDS.HELP}: –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n` +
        `- ${COMMANDS.DELIVERY}: –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É\n` +
        `- ${COMMANDS.CANCEL}: –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑`,
        'main'
    );
};

const handleDelivery = async (ctx) => {
    console.log('=== –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ ===');
    console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.peerId);
    console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', await ctx.getState());

    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        const categories = await getCategories();
        console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categories.map(c => c.name));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–∏—Ü—Ü—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã...');
        const cartItems = (await bot.getAllDocuments('cart'))
            .filter(item => item.userId === ctx.peerId);
        console.log('–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ:', cartItems.length);

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        const categoryButtons = categories.map((category, index) => ({
            text: category.name,
            color: category.color,
            row: 0
        }));

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
        categoryButtons.push({
            text: COMMANDS.BACK,
            color: 'secondary',
            row: 1
        });

        // –ï—Å–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ –µ—Å—Ç—å –ø–∏—Ü—Ü—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        if (cartItems.length > 0) {
            console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞...');
            categoryButtons.push({
                text: COMMANDS.CHECKOUT,
                color: 'primary',
                row: 1
            });
        }

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        console.log('–ö–Ω–æ–ø–∫–∏:', JSON.stringify(categoryButtons, null, 2));
        bot.registerKeyboard('categories', {
            buttons: categoryButtons
        });
        console.log('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞');

        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π...');
        await bot.sendText(
            ctx.peerId,
            '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–∏—Ü—Ü—ã:',
            'categories'
        );
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

        console.log('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è categories...');
        await ctx.setState('categories');
        console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ categories —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handleDelivery:', error);
    }
};

const handleCategory = async (ctx, categoryName) => {
    console.log('=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===');
    console.log('–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', categoryName);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ë–î
    const categories = await getCategories();
    console.log('–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categories);
    
    const category = categories.find(c => c.name === categoryName);
    console.log('–ù–∞–π–¥–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', category);
    
    if (!category) {
        console.error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', categoryName);
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–∏—Ü—Ü—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –ø–∏—Ü—Ü—ã –∏–∑ –ë–î...');
    const pizzas = await getPizzas();
    
    if (!Array.isArray(pizzas)) {
        console.error('–û—à–∏–±–∫–∞: pizzas –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', pizzas);
        return;
    }
    
    console.log('–ü–æ–ª—É—á–µ–Ω—ã –ø–∏—Ü—Ü—ã –∏–∑ –ë–î:', pizzas.length, '—à—Ç.');
    console.log('–§–∏–ª—å—Ç—Ä—É–µ–º –ø–∏—Ü—Ü—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', category.code);
    
    const categoryPizzas = pizzas.filter(p => {
        const match = p.categoryId === category.code;
        console.log(`–ü–∏—Ü—Ü–∞ "${p.name}": categoryId=${p.categoryId}, –Ω—É–∂–µ–Ω=${category.code}, —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ=${match}`);
        return match;
    });
    
    console.log('–ù–∞–π–¥–µ–Ω–æ –ø–∏—Ü—Ü –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoryPizzas.length);
    console.log('–ü–∏—Ü—Ü—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoryPizzas.map(p => p.name));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await ctx.setState(`pizza_selection:${category.code}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∏—Ü—Ü–∞–º–∏
    await bot.sendText(ctx.peerId, `–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∏—Ü—Ü—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.name}:`, null);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Ü—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoryPizzas);
    for (const pizza of categoryPizzas) {
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Ü—Ü—ã:', pizza.name, pizza.image);
        try {
            await bot.sendImgWithText(
                ctx.peerId,
                `üçï ${pizza.name}\nüìù ${pizza.description}\nüí∞ –¶–µ–Ω–∞: ${pizza.price} —Ä—É–±.`,
                pizza.image
            );
            console.log('–ü–∏—Ü—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', pizza.name);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Ü—Ü—ã:', pizza.name, error);
        }
    }

    // –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –æ–±—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∏—Ü—Ü—ã
    const pizzaButtons = categoryPizzas.map((pizza, index) => ({
        text: `üõí ${pizza.name}`,
        color: 'positive',
        row: Math.floor(index / 2), // –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        payload: {
            command: 'add_to_cart',
            pizzaName: pizza.name
        }
    }));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–∏—Ü—Ü—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    const cartItems = (await bot.getAllDocuments('cart'))
        .filter(item => item.userId === ctx.peerId);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    pizzaButtons.push({
        text: COMMANDS.BACK,
        color: 'secondary',
        row: Math.ceil(pizzaButtons.length / 2) // –ü–æ–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –Ω–æ–≤—ã–π —Ä—è–¥
    });

    // –ï—Å–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ –µ—Å—Ç—å –ø–∏—Ü—Ü—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    if (cartItems.length > 0) {
        pizzaButtons.push({
            text: COMMANDS.CHECKOUT,
            color: 'primary',
            row: Math.ceil(pizzaButtons.length / 2) // –í —Ç–æ–º –∂–µ —Ä—è–¥—É —á—Ç–æ –∏ "–ù–∞–∑–∞–¥"
        });
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboardName = `category_${category.code}_selection`;
    console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∏—Ü—Ü—ã:', keyboardName);
    console.log('–ö–Ω–æ–ø–∫–∏:', JSON.stringify(pizzaButtons, null, 2));
    
    try {
        bot.registerKeyboard(keyboardName, {
            buttons: pizzaButtons
        });
        console.log('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∏—Ü—Ü—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞');

        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π...');
        await bot.sendText(
            ctx.peerId,
            '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:',
            keyboardName
        );
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
};

const handleCheckout = async (ctx) => {
    console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞');
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const cartItems = (await bot.getAllDocuments('cart'))
        .filter(item => item.userId === ctx.peerId);
    
    if (cartItems.length === 0) {
        await bot.sendText(
            ctx.peerId,
            '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–∏—Ü—Ü—ã –≤ –∑–∞–∫–∞–∑.',
            'main'
        );
        return;
    }

    // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
    const total = cartItems.reduce((sum, item) => sum + item.pizza.price, 0);
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
    bot.registerKeyboard('payment', {
        buttons: [
            {
                text: COMMANDS.BACK,
                color: 'secondary',
                row: 0
            },
            {
                text: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ',
                color: 'positive',
                row: 0
            }
        ]
    });

    await bot.sendText(
        ctx.peerId,
        '–í–∞—à –∑–∞–∫–∞–∑:\n' +
        cartItems.map(item => `- ${item.pizza.name} (${item.pizza.price} —Ä—É–±.)`).join('\n') +
        `\n\n–ò—Ç–æ–≥–æ: ${total} —Ä—É–±.`,
        'payment'
    );
    
    await ctx.setState('payment');
};

const handleCancel = async (ctx) => {
    console.log('–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞');
    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const cartItems = (await bot.getAllDocuments('cart'))
        .filter(item => item.userId === ctx.peerId);
    
    for (const item of cartItems) {
        await bot.deleteDocument('cart', item._id);
    }

    await bot.sendText(
        ctx.peerId,
        '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
        'main'
    );
    await ctx.setState('main');
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
const handleAddToCart = async (ctx) => {
    console.log('=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É ===');
    console.log('–ü–æ–ª—É—á–µ–Ω payload:', ctx.message?.payload);
    console.log('–¢–∏–ø payload:', typeof ctx.message?.payload);
    
    const pizzaName = ctx.message?.payload?.pizzaName;
    if (!pizzaName) {
        console.error('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ payload');
        return;
    }

    console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ü—Ü—ã –≤ –∫–æ—Ä–∑–∏–Ω—É:', pizzaName);
    console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', await ctx.getState());
    const pizzas = await getPizzas();
    const pizza = pizzas.find(p => p.name === pizzaName);

    if (!pizza) {
        console.error('–ü–∏—Ü—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', pizzaName);
        return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    const cartItem = {
        userId: ctx.peerId,
        pizza: pizza,
        timestamp: new Date()
    };
    console.log('=== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É ===');
    console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.peerId);
    console.log('–ü–∏—Ü—Ü–∞:', pizza);
    console.log('–î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É:', cartItem);
    
    try {
        const result = await bot.addDocument('cart', cartItem);
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:', result);
        console.log('–ü–∏—Ü—Ü–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø–∏—Ü—Ü—ã
    const currentCategory = (await getCategories())
        .find(c => c.code === pizza.categoryId);
    
    if (!currentCategory) {
        console.error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–∏—Ü—Ü—ã:', pizza.categoryId);
        return;
    }

    console.log('–¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', currentCategory);

    // –ü–æ–ª—É—á–∞–µ–º –ø–∏—Ü—Ü—ã —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const categoryPizzas = (await getPizzas())
        .filter(p => p.categoryId === currentCategory.code);

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∏—Ü—Ü
    const pizzaButtons = categoryPizzas.map((p, index) => ({
        text: `üõí ${p.name}`,
        color: 'positive',
        row: Math.floor(index / 2),
        payload: {
            command: 'add_to_cart',
            pizzaName: p.name
        }
    }));

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    pizzaButtons.push(
        {
            text: COMMANDS.BACK,
            color: 'secondary',
            row: Math.ceil(pizzaButtons.length / 2)
        },
        {
            text: COMMANDS.CHECKOUT,
            color: 'primary',
            row: Math.ceil(pizzaButtons.length / 2)
        }
    );

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboardName = `category_${currentCategory.code}_selection`;
    console.log('–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É:', keyboardName);
    console.log('–ö–Ω–æ–ø–∫–∏:', JSON.stringify(pizzaButtons, null, 2));
    
    try {
        bot.registerKeyboard(keyboardName, {
            buttons: pizzaButtons
        });
        console.log('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É');
        await bot.sendText(
            ctx.peerId,
            `‚úÖ –ü–∏—Ü—Ü–∞ "${pizza.name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!\n–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø–∏—Ü—Ü—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.`,
            keyboardName
        );
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–∏—Ü—Ü —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await ctx.setState(`pizza_selection:${currentCategory.code}`);
};

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
const registerCommandsAndKeyboards = async () => {
    console.log('=== –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä ===');
    
    try {
        console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥...');
        bot.command(COMMANDS.START, handleStart);
        bot.command(COMMANDS.HELP, handleHelp);
        bot.command(COMMANDS.DELIVERY, handleDelivery);
        bot.command(COMMANDS.CANCEL, handleCancel);
        bot.command(COMMANDS.CHECKOUT, handleCheckout);

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –æ–ø–ª–∞—Ç—ã –≤ –æ–±–æ–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö
        const handlePayment = async (ctx) => {
            if (await ctx.getState() === 'payment') {
                console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ"');
                // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const cartItems = (await bot.getAllDocuments('cart'))
                    .filter(item => item.userId === ctx.peerId);
                
                console.log('–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
                for (const item of cartItems) {
                    await bot.deleteDocument('cart', item._id);
                }
                console.log('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');

                console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞...');
                await bot.sendText(
                    ctx.peerId,
                    '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –≠—Ç–æ –¥–µ–º–æ-–±–æ—Ç, –ø–æ—ç—Ç–æ–º—É –æ–ø–ª–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.',
                    'main'
                );
                await ctx.setState('main');
                console.log('–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ main');
            }
        };
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ–±–æ–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö
        bot.command('–ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', handlePayment);
        bot.command('–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', handlePayment);
        console.log('–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—ã
        console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î...');
        const categories = await getCategories();
        console.log('–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categories.length);
        
        console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        categories.forEach(category => {
            console.log(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category.name}`);
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
            bot.command(category.name, (ctx) => handleCategory(ctx, category.name));
            // –ò –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            bot.command(category.name.toLowerCase(), (ctx) => handleCategory(ctx, category.name));
            console.log(`–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–æ–º–∞–Ω–¥—ã: "${category.name}" –∏ "${category.name.toLowerCase()}"`);
        });
        console.log('–ö–æ–º–∞–Ω–¥—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');

        console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä...');
        console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...');
        bot.registerKeyboard('main', {
            buttons: [
                {
                    text: COMMANDS.DELIVERY,
                    color: 'primary',
                    row: 0
                },
                {
                    text: COMMANDS.HELP,
                    color: 'secondary',
                    row: 0
                }
            ]
        });
        console.log('–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞');

        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã...');
        const cartItems = (await bot.getAllDocuments('cart'))
            .filter(item => item.userId === 1); // –ò—Å–ø–æ–ª—å–∑—É–µ–º 1 –∫–∞–∫ peerId –≤ development —Ä–µ–∂–∏–º–µ
        console.log('–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ:', cartItems.length);

        console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        const categoryButtons = categories.map((category, index) => ({
            text: category.name,
            color: category.color,
            row: 0
        }));

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        categoryButtons.push({
            text: COMMANDS.BACK,
            color: 'secondary',
            row: 1
        });

        // –ï—Å–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ –µ—Å—Ç—å –ø–∏—Ü—Ü—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        if (cartItems.length > 0) {
            categoryButtons.push({
                text: COMMANDS.CHECKOUT,
                color: 'primary',
                row: 1
            });
        }

        console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        console.log('–ö–Ω–æ–ø–∫–∏:', JSON.stringify(categoryButtons, null, 2));
        bot.registerKeyboard('categories', {
            buttons: categoryButtons
        });
        console.log('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞');

        console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä...');
        bot.registerKeyboard('pizza_actions', {
            buttons: [
                {
                    text: COMMANDS.BACK,
                    color: 'secondary',
                    row: 0
                },
                {
                    text: COMMANDS.CANCEL,
                    color: 'negative',
                    row: 0
                }
            ]
        });

        bot.registerKeyboard('cart_actions', {
            buttons: [
                {
                    text: COMMANDS.DELIVERY,
                    color: 'primary',
                    row: 0
                },
                {
                    text: COMMANDS.CHECKOUT,
                    color: 'positive',
                    row: 0
                },
                {
                    text: COMMANDS.CANCEL,
                    color: 'negative',
                    row: 1
                }
            ]
        });
        console.log('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
        
        console.log('=== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä:', error);
        throw error;
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (ctx) => {
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    console.log('–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', ctx.message?.text);
    console.log('Payload:', ctx.message?.payload);
    const state = await ctx.getState();
    console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ:', state);
    console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.peerId);

    // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ undefined, –≤—ã–∑—ã–≤–∞–µ–º handleStart
    if (!state) {
        console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –≤—ã–∑—ã–≤–∞–µ–º handleStart');
        await handleStart(ctx);
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º payload
    if (ctx.message?.payload) {
        let payload = ctx.message.payload;
        
        try {
            // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ payload –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –∫–∞–∫ –æ–±—ä–µ–∫—Ç –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞
            if (typeof payload === 'string') {
                console.log('–ò—Å—Ö–æ–¥–Ω—ã–π payload (—Å—Ç—Ä–æ–∫–∞):', payload);
                try {
                    payload = JSON.parse(payload);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', error);
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º payload –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            ctx.message.payload = payload;
            console.log('–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π payload:', payload);

            // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ add_to_cart, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            if (payload?.command === 'add_to_cart') {
                await handleAddToCart(ctx);
                return;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ payload:', error);
            return;
        }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const text = (ctx.message?.text || '').toLowerCase();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    switch(text) {
        case COMMANDS.START:
            await handleStart(ctx);
            break;
        case COMMANDS.HELP:
            await handleHelp(ctx);
            break;
        case COMMANDS.DELIVERY:
            await handleDelivery(ctx);
            break;
        case COMMANDS.CANCEL:
            await handleCancel(ctx);
            break;
        case COMMANDS.CHECKOUT:
            await handleCheckout(ctx);
            break;
        case COMMANDS.BACK:
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            const state = await ctx.getState();
            if (state === 'categories') {
                await handleStart(ctx);
            } else if (state.startsWith('pizza_selection:')) {
                await handleDelivery(ctx);
            } else if (state === 'payment') {
                await handleDelivery(ctx);
            } else {
                await handleStart(ctx);
            }
            break;
        default:
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const categories = await getCategories();
            console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –¢–µ–∫—Å—Ç:', text);
            console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categories.map(c => c.name));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const userState = await ctx.getState();
            console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', userState);
            
            if (userState === 'categories') {
                // –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                const selectedCategory = categories.find(c => 
                    c.name.toLowerCase() === text || // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    c.name === text // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
                );
                
                if (selectedCategory) {
                    console.log('–ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', selectedCategory);
                    await handleCategory(ctx, selectedCategory.name);
                    return;
                } else {
                    console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–≤–µ—Ä–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    await bot.sendText(
                        ctx.peerId,
                        '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.',
                        'categories'
                    );
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ–ø–ª–∞—Ç—ã
            if (text === COMMANDS.PAYMENT && userState === 'payment') {
                console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ"');
                // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const cartItems = (await bot.getAllDocuments('cart'))
                    .filter(item => item.userId === ctx.peerId);
                
                console.log('–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
                for (const item of cartItems) {
                    await bot.deleteDocument('cart', item._id);
                }
                console.log('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');

                console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞...');
                await bot.sendText(
                    ctx.peerId,
                    '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –≠—Ç–æ –¥–µ–º–æ-–±–æ—Ç, –ø–æ—ç—Ç–æ–º—É –æ–ø–ª–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.',
                    'main'
                );
                await ctx.setState('main');
                console.log('–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ main');
            }
            // –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
            else if (!state) {
                await handleStart(ctx);
            }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞
bot.on('start', async () => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
});

// –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω
if (config.webInterface.enabled) {
    const debugServer = new DebugServer();
    debugServer.start().then(() => {
        console.log(`–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:${config.webInterface.port}`);
    });
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const initDatabase = async () => {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–∏—Ü—Ü–∞—Ö
    await bot.clearCollection('categories');
    await bot.clearCollection('pizzas');
    
    // –ù–ï –æ—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    // await bot.clearCollection('user_states');
    // await bot.clearCollection('cart');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = [
        { name: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ', code: 'classic', color: 'primary' },
        { name: '–û—Å—Ç—Ä—ã–µ', code: 'spicy', color: 'negative' },
        { name: '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ', code: 'vegetarian', color: 'positive' }
    ];
    
    for (const category of categories) {
        await bot.addDocument('categories', category);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∏—Ü—Ü—ã
    const pizzas = [
        // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –ø–∏—Ü—Ü—ã
        {
            name: '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞',
            description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–∏—Ü—Ü–∞ —Å —Ç–æ–º–∞—Ç–Ω—ã–º —Å–æ—É—Å–æ–º –∏ –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π',
            price: 499,
            image: 'https://i.imgur.com/kbYoRIJ.jpeg',
            categoryId: 'classic'
        },
        {
            name: '–ß–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞',
            description: '–ü–∏—Ü—Ü–∞ —Å –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π, –≥–æ—Ä–≥–æ–Ω–∑–æ–ª–æ–π, –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º –∏ —Ä–∏–∫–æ—Ç—Ç–æ–π',
            price: 649,
            image: 'https://i.imgur.com/qVxqVct.jpeg',
            categoryId: 'classic'
        },
        {
            name: '–ì–∞–≤–∞–π—Å–∫–∞—è',
            description: '–ü–∏—Ü—Ü–∞ —Å –≤–µ—Ç—á–∏–Ω–æ–π –∏ –∞–Ω–∞–Ω–∞—Å–∞–º–∏',
            price: 599,
            image: 'https://i.imgur.com/YxgxwVX.jpeg',
            categoryId: 'classic'
        },
        
        // –û—Å—Ç—Ä—ã–µ –ø–∏—Ü—Ü—ã
        {
            name: '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏',
            description: '–û—Å—Ç—Ä–∞—è –ø–∏—Ü—Ü–∞ —Å –∫–æ–ª–±–∞—Å–æ–π –ø–µ–ø–ø–µ—Ä–æ–Ω–∏',
            price: 599,
            image: 'https://i.imgur.com/qVxqVct.jpeg',
            categoryId: 'spicy'
        },
        {
            name: '–î—å—è–±–ª–æ',
            description: '–û—Å—Ç—Ä–∞—è –ø–∏—Ü—Ü–∞ —Å —Ö–∞–ª–∞–ø–µ–Ω—å–æ –∏ –æ—Å—Ç—Ä—ã–º–∏ –∫–æ–ª–±–∞—Å–∫–∞–º–∏',
            price: 649,
            image: 'https://i.imgur.com/kbYoRIJ.jpeg',
            categoryId: 'spicy'
        },
        {
            name: '–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è',
            description: '–û—Å—Ç—Ä–∞—è –ø–∏—Ü—Ü–∞ —Å –ø–µ—Ä—Ü–µ–º —á–∏–ª–∏ –∏ –∫—É–∫—É—Ä—É–∑–æ–π',
            price: 629,
            image: 'https://i.imgur.com/YxgxwVX.jpeg',
            categoryId: 'spicy'
        },

        // –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ –ø–∏—Ü—Ü—ã
        {
            name: '–û–≤–æ—â–Ω–∞—è',
            description: '–ü–∏—Ü—Ü–∞ —Å –≥—Ä–∏–±–∞–º–∏, –ø–µ—Ä—Ü–µ–º –∏ —Ç–æ–º–∞—Ç–∞–º–∏',
            price: 549,
            image: 'https://i.imgur.com/YxgxwVX.jpeg',
            categoryId: 'vegetarian'
        },
        {
            name: '–ì—Ä–∏–±–Ω–∞—è',
            description: '–ü–∏—Ü—Ü–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∏–¥–∞–º–∏ –≥—Ä–∏–±–æ–≤',
            price: 579,
            image: 'https://i.imgur.com/kbYoRIJ.jpeg',
            categoryId: 'vegetarian'
        },
        {
            name: '–°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—è',
            description: '–ü–∏—Ü—Ü–∞ —Å –æ–ª–∏–≤–∫–∞–º–∏, —Ç–æ–º–∞—Ç–∞–º–∏ –∏ –±–∞–∑–∏–ª–∏–∫–æ–º',
            price: 599,
            image: 'https://i.imgur.com/qVxqVct.jpeg',
            categoryId: 'vegetarian'
        }
    ];
    
    for (const pizza of pizzas) {
        await bot.addDocument('pizzas', pizza);
    }
    
    console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫
const start = async () => {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await bot.init({
            dbUri: config.database.uri
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–∏—Ü—Ü–∞–º–∏
        await initDatabase();

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        await registerCommandsAndKeyboards();

        // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        console.log('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
        bot.start();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
        process.exit(1);
    }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
start();
